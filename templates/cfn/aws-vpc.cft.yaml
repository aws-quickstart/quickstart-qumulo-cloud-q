AWSTemplateFormatVersion: 2010-09-09
Description: This template builds the VPC, public and private subnets, NAT gateway, and several Security Groups (qs-1s6n2i64h)
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W9001
        - W9002
        - W9003
        - W9004
        - W9006

Parameters:
  VpcCidr:
    Type: String
  AvailabilityZone:
    Type: String
  PublicSubnetCidr:
    Type: String
  PrivateSubnetCidr:
    Type: String
  AvailabilityZoneDR:
    Type: String  
  PublicSubnetCidrDR:
    Type: String
  PrivateSubnetCidrDR:
    Type: String
  QClusterLocalZone:
    Type: String
  SideCarAZ:
    Type: String
  SideCarPrivateSubnetCidr:
    Type: String    

Conditions:
  LocalAZ: !Not
    - !Equals
      - !Ref QClusterLocalZone
      - "NO"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Cloud-Q-Quickstart"

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Public-Prod"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Private-Prod"

  PublicSubnetDR:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrDR
      AvailabilityZone: !Ref AvailabilityZoneDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Public-DR"

  PrivateSubnetDR:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidrDR
      AvailabilityZone: !Ref AvailabilityZoneDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Private-DR"

  SideCarPrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Condition: LocalAZ
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SideCarPrivateSubnetCidr
      AvailabilityZone: !Ref SideCarAZ
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Private-Lambda"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Cloud-Q-Quickstart"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Public"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Private"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  PublicSubnetDRRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetDR
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetDRRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnetDR
      RouteTableId: !Ref PrivateRouteTable

  SideCarPrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: LocalAZ
    Properties:
      SubnetId: !Ref SideCarPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - NatEIP
        - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Cloud-Q-Quickstart"

  NatEIP:
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - Cloud-Q-Quickstart"

  NatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  DefaultSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: default
      VpcId: !Ref VPC

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC      

Outputs:
  VPCID:
    Value: !Ref VPC
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
  PublicSubnetId:
    Value: !Ref PublicSubnet
  PrivateSubnetIdDR:
    Value: !Ref PrivateSubnetDR
  PublicSubnetIdDR:
    Value: !Ref PublicSubnetDR 
  SideCarPrivateSubnetId:
    Value: !If [LocalAZ, !Ref SideCarPrivateSubnet, !Ref PrivateSubnet]


